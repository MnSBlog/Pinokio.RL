// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace OHTMsg
{

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct OHTRequestMsg : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static OHTRequestMsg GetRootAsOHTRequestMsg(ByteBuffer _bb) { return GetRootAsOHTRequestMsg(_bb, new OHTRequestMsg()); }
  public static OHTRequestMsg GetRootAsOHTRequestMsg(ByteBuffer _bb, OHTRequestMsg obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public OHTRequestMsg __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public OHTMsg.MsgType Type { get { int o = __p.__offset(4); return o != 0 ? (OHTMsg.MsgType)__p.bb.GetSbyte(o + __p.bb_pos) : OHTMsg.MsgType.None; } }
  public int OhtId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public byte PrevState(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int PrevStateLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrevStateBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrevStateBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrevStateArray() { return __p.__vector_as_array<byte>(8); }
  public int PrevAction { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public float Reward { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public byte State(int j) { int o = __p.__offset(14); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int StateLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStateBytes() { return __p.__vector_as_span<byte>(14, 1); }
#else
  public ArraySegment<byte>? GetStateBytes() { return __p.__vector_as_arraysegment(14); }
#endif
  public byte[] GetStateArray() { return __p.__vector_as_array<byte>(14); }
  public bool Done { get { int o = __p.__offset(16); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }

  public static Offset<OHTMsg.OHTRequestMsg> CreateOHTRequestMsg(FlatBufferBuilder builder,
      OHTMsg.MsgType type = OHTMsg.MsgType.None,
      int oht_id = 0,
      VectorOffset prev_stateOffset = default(VectorOffset),
      int prev_action = 0,
      float reward = 0.0f,
      VectorOffset stateOffset = default(VectorOffset),
      bool done = false) {
    builder.StartTable(7);
    OHTRequestMsg.AddState(builder, stateOffset);
    OHTRequestMsg.AddReward(builder, reward);
    OHTRequestMsg.AddPrevAction(builder, prev_action);
    OHTRequestMsg.AddPrevState(builder, prev_stateOffset);
    OHTRequestMsg.AddOhtId(builder, oht_id);
    OHTRequestMsg.AddDone(builder, done);
    OHTRequestMsg.AddType(builder, type);
    return OHTRequestMsg.EndOHTRequestMsg(builder);
  }

  public static void StartOHTRequestMsg(FlatBufferBuilder builder) { builder.StartTable(7); }
  public static void AddType(FlatBufferBuilder builder, OHTMsg.MsgType type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddOhtId(FlatBufferBuilder builder, int ohtId) { builder.AddInt(1, ohtId, 0); }
  public static void AddPrevState(FlatBufferBuilder builder, VectorOffset prevStateOffset) { builder.AddOffset(2, prevStateOffset.Value, 0); }
  public static VectorOffset CreatePrevStateVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreatePrevStateVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartPrevStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddPrevAction(FlatBufferBuilder builder, int prevAction) { builder.AddInt(3, prevAction, 0); }
  public static void AddReward(FlatBufferBuilder builder, float reward) { builder.AddFloat(4, reward, 0.0f); }
  public static void AddState(FlatBufferBuilder builder, VectorOffset stateOffset) { builder.AddOffset(5, stateOffset.Value, 0); }
  public static VectorOffset CreateStateVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateStateVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartStateVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddDone(FlatBufferBuilder builder, bool done) { builder.AddBool(6, done, false); }
  public static Offset<OHTMsg.OHTRequestMsg> EndOHTRequestMsg(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<OHTMsg.OHTRequestMsg>(o);
  }
};


}
